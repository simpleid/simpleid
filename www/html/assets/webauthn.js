/* DO NOT EDIT - automatically generated */
(()=>{function a(t,e){let r=new Uint8Array(t),n="";for(let c of r)n+=String.fromCharCode(c);return btoa(n).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,e?"=":"")}function i(t){let e=atob(t.replace(/-/g,"+").replace(/_/g,"/")),r=new Uint8Array(e.length);for(let n=0;n<e.length;n++)r[n]=e.charCodeAt(n);return r}var l=null;document.addEventListener("webauthn:abort",t=>{l?.abort(t)});window.webAuthnCreatePublicKeyCredential=async function(t){t.challenge=i(t.challenge),t.user.id=i(t.user.id),"excludeCredentials"in t&&(t.excludeCredentials=t.excludeCredentials.map(n=>(n.id=i(n.id),n))),l=new AbortController;let e=await navigator.credentials.create({publicKey:t,signal:l.signal});return{id:e.id,rawId:a(e.rawId),authenticatorAttachment:e.authenticatorAttachment,type:e.type,clientExtensionResults:e.getClientExtensionResults(),response:{attestationObject:a(e.response.attestationObject),clientDataJSON:a(e.response.clientDataJSON),authenticatorData:a(e.response.getAuthenticatorData()),publicKey:a(e.response.getPublicKey()),publicKeyAlgorithm:e.response.getPublicKeyAlgorithm(),transports:e.response.getTransports()}}};window.webAuthnGetPublicKeyCredential=async function(t){t.publicKey.challenge=i(t.publicKey.challenge),"allowCredentials"in t.publicKey&&(t.publicKey.allowCredentials=t.publicKey.allowCredentials.map(n=>(n.id=i(n.id),n))),l=new AbortController,t.signal=l.signal;let e=await navigator.credentials.get(t);return{id:e.id,rawId:a(e.rawId),authenticatorAttachment:e.authenticatorAttachment,type:e.type,clientExtensionResults:e.getClientExtensionResults(),response:{authenticatorData:a(e.response.authenticatorData),clientDataJSON:a(e.response.clientDataJSON),signature:a(e.response.signature),userHandle:a(e.response.userHandle)}}};document.isPublicKeyCredentialSupported=()=>"PublicKeyCredential"in window;document.hasLocalAuthenticator=async function(){return document.isPublicKeyCredentialSupported()?await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable():!1};})();
