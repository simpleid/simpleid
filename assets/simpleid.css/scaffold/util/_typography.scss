@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';
@use 'common';

// Font family
$font-sans: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
$font-serif: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
$font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;

// Font size
$font-size-presets: (
  'xs': 0.75rem 1rem,
  'sm': 0.875rem 1.25rem,
  'base': 1rem 1.5rem,
  'lg': 1.125rem 1.75rem,
  'xl': 1.25rem 1.75rem,
  '2xl': 1.5rem 2rem,
  '3xl': 1.875rem 2.25rem,
  '4xl': 2.25rem 2.5rem,
  '5xl': 3rem 1,
  '6xl': 3.75rem 1,
  '7xl': 4.5rem 1,
  '8xl': 6rem 1,
  '9xl': 8rem 1
) !default;

@function font-size($value) {
  @if map.has-key($font-size-presets, $value) {
    @return nth(map.get($font-size-presets, $value), 1);
  } @else {
    @return $value;
  }
}

@function line-height($value) {
  @if map.has-key($font-size-presets, $value) {
    @return nth(map.get($font-size-presets, $value), 2);
  } @else {
    @return $value;
  }
}

@mixin text-size($preset) {
  $values: map.get($font-size-presets, $preset);
  font-size: nth($values, 1);
  line-height: nth($values, 2);
}

// Font weight
$font-weight-presets: (
  thin: 100,
  extralight: 200,
  light: 300,
  normal: 400,
  medium: 500,
  semibold: 600,
  bold: 700,
  extrabold: 800,
  black: 900
);

@function font-weight($value) {
  @if map.has-key($font-weight-presets, $value) {
    @return map.get($font-weight-presets, $value);
  } @else {
    @return $value;
  }
}

// Line height
$line-height-presets: (
  none: 1,
  tight: 1.25,
  snug: 1.375,
  normal: 1.5,
  relaxed: 1.625,
  loose: 2
) !default;
$line-height-unit: common.$sizing-unit !default;

@function leading($value, $unit: $line-height-unit) {
  $result: 1;

  @if map.has-key($line-height-presets, $value) {
    $result: map.get($line-height-presets, $value);
  } @else if meta.type-of($value) == number {
    @if math.is-unitless($value) {
        $result: $value * $unit;
      } @else {
        $result: $value;
      }
  }
  @return $result;
}

// Text overflow
@mixin overflow-truncate-text {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}